JavaScript Interview: Can You Stop or Break a forEach Loop?

==================================================================

Kesimpulan: forEach menawarkan pendekatan sederhana untuk iterasi array, tetapi kurang fleksibel dalam
menghentikan loop. Alternatif seperti for...of, some(), dan every() memberikan kontrol yang lebih baik untuk 
skenario yang lebih kompleks.

1. Contoh forEach
2. Contoh forEach dengan return
3. Contoh forEach dengan Eksepsi
4. Contoh for...of Loop
5. Contoh Array.prototype.some()
6. Contoh Array.prototype.every()

==========================================

1. Contoh forEach

const fruits = ["apple", "banana", "cherry"];
fruits.forEach(function(fruit) {
  console.log(fruit);
});

// Output:
// apple
// banana
// cherry

2. Contoh forEach dengan return

const numbers = [1, 2, 3, 4, 5];
numbers.forEach(number => {
  if (number === 3) {
    return; // Hanya menghentikan iterasi saat ini
  }
  console.log(number);
});

// Output:
// 1
// 2
// 4
// 5

3. Contoh forEach dengan Eksepsi

const numbers = [1, 2, 3, 4, 5];
try {
  numbers.forEach(number => {
    if (number > 3) {
      throw new Error('Loop stopped');
    }
    console.log(number);
  });
} catch (e) {
  console.log('Loop was stopped due to an exception.');
}

// Output:
// 1
// 2
// 3
// Loop was stopped due to an exception.


4. Contoh for...of Loop

const numbers = [1, 2, 3, 4, 5];

for (const number of numbers) {
  if (number > 3) {
    break; // Berhasil menghentikan loop
  }
  console.log(number);
}

// Output:
// 1
// 2
// 3


5. Contoh Array.prototype.some()

const numbers = [1, 2, 3, 4, 5];

numbers.some(number => {
  if (number > 3) {
    return true; // Menghentikan iterasi
  }
  console.log(number);
  return false;
});

// Output:
// 1
// 2
// 3

6. Contoh Array.prototype.every()

const numbers = [1, 2, 3, 4, 5];

numbers.every(number => {
  if (number > 3) {
    return false; // Menghentikan iterasi
  }
  console.log(number);
  return true;
});

// Output:
// 1
// 2
// 3


=========================================


